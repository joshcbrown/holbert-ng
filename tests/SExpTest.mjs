// Generated by ReScript, PLEASE EDIT WITH CARE

import * as SExp from "../src/SExp.mjs";
import * as Test from "rescript-test/src/Test.mjs";
import * as TestUtil from "./TestUtil.mjs";

function intEqual(message, a, b) {
  Test.assertion(message, "Int equals", (function (a, b) {
          return a === b;
        }), a, b);
}

var Util = TestUtil.MakeTerm(SExp);

Test.test("parse symbol", (function () {
        Util.testParse("x", {
              TAG: "Symbol",
              name: "x"
            }, undefined);
        Util.testParse("xyz", {
              TAG: "Symbol",
              name: "xyz"
            }, undefined);
      }));

Test.test("parse var", (function () {
        Util.testParse("\\1", {
              TAG: "Var",
              idx: 1
            }, undefined);
        Util.testParse("\\234", {
              TAG: "Var",
              idx: 234
            }, undefined);
      }));

Test.test("parse schematic", (function () {
        Util.testParse("?1()", {
              TAG: "Schematic",
              schematic: 1,
              allowed: []
            }, undefined);
        Util.testParse("?1(\\1)", {
              TAG: "Schematic",
              schematic: 1,
              allowed: [1]
            }, undefined);
        Util.testParse("?1(\\1 \\23 \\4)", {
              TAG: "Schematic",
              schematic: 1,
              allowed: [
                1,
                23,
                4
              ]
            }, undefined);
      }));

Test.test("parse compound", (function () {
        Util.testParse("()", {
              TAG: "Compound",
              subexps: []
            }, undefined);
        Util.testParse("(a)", {
              TAG: "Compound",
              subexps: [{
                  TAG: "Symbol",
                  name: "a"
                }]
            }, undefined);
        Util.testParse("(a \\1 ?1())", {
              TAG: "Compound",
              subexps: [
                {
                  TAG: "Symbol",
                  name: "a"
                },
                {
                  TAG: "Var",
                  idx: 1
                },
                {
                  TAG: "Schematic",
                  schematic: 1,
                  allowed: []
                }
              ]
            }, undefined);
      }));

export {
  intEqual ,
  Util ,
}
/* Util Not a pure module */
