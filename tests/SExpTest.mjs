// Generated by ReScript, PLEASE EDIT WITH CARE

import * as SExp from "../src/SExp.mjs";
import * as Zora from "zora";
import * as TestUtil from "./TestUtil.mjs";

var Util = TestUtil.MakeTerm(SExp);

Zora.test("parse symbol", (function (t) {
        t.test("single char", (function (t) {
                Util.testParse(t, "x", {
                      TAG: "Symbol",
                      name: "x"
                    }, undefined);
              }));
        t.test("multi char", (function (t) {
                Util.testParse(t, "xyz", {
                      TAG: "Symbol",
                      name: "xyz"
                    }, undefined);
              }));
      }));

Zora.test("parse var", (function (t) {
        t.test("single digit", (function (t) {
                Util.testParse(t, "\\1", {
                      TAG: "Var",
                      idx: 1
                    }, undefined);
              }));
        t.test("multi digit", (function (t) {
                Util.testParse(t, "\\234", {
                      TAG: "Var",
                      idx: 234
                    }, undefined);
              }));
      }));

Zora.test("parse schematic", (function (t) {
        t.test("empty allowed", (function (t) {
                Util.testParse(t, "?1()", {
                      TAG: "Schematic",
                      schematic: 1,
                      allowed: []
                    }, undefined);
              }));
        t.test("one allowed", (function (t) {
                Util.testParse(t, "?1(\\1)", {
                      TAG: "Schematic",
                      schematic: 1,
                      allowed: [1]
                    }, undefined);
              }));
        t.test("multiple allowed", (function (t) {
                Util.testParse(t, "?1(\\1 \\23 \\4)", {
                      TAG: "Schematic",
                      schematic: 1,
                      allowed: [
                        1,
                        2,
                        4
                      ]
                    }, undefined);
              }));
      }));

Zora.test("parse compound", (function (t) {
        t.test("unit", (function (t) {
                Util.testParse(t, "()", {
                      TAG: "Compound",
                      subexps: []
                    }, undefined);
              }));
        t.test("single", (function (t) {
                Util.testParse(t, "(a)", {
                      TAG: "Compound",
                      subexps: [{
                          TAG: "Symbol",
                          name: "a"
                        }]
                    }, undefined);
              }));
        t.test("multiple", (function (t) {
                Util.testParse(t, "(a \\1 ?1())", {
                      TAG: "Compound",
                      subexps: [
                        {
                          TAG: "Symbol",
                          name: "a"
                        },
                        {
                          TAG: "Var",
                          idx: 1
                        },
                        {
                          TAG: "Schematic",
                          schematic: 1,
                          allowed: []
                        }
                      ]
                    }, undefined);
              }));
      }));

export {
  Util ,
}
/* Util Not a pure module */
